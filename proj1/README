This is programming assignment 1 for COMS 352 (Operating Systems) at Iowa State.

=============================================================
Changes
=============================================================

Files added:
- user/schedtestc.c
    - Testing! Run with schedtestc in the shell.
- kernel/proc_queue.h
    - The queue detailed in section 3.3
    - Being in a seperate file lets me test it easier.
Files changed:
- param.h
    - Added SCHEDULER const as detailed in assignment.
- trap.c
    - Modified usertrap to increment runtime on timer interrupt.
    - For stride, always yields.
    - For RR, only yields after two consecutive timer interupts.
        - I added a property to proc, remaining_quanta to track this.
- sysproc.c
    - Functions to read from userland for stride, getruntime.
- proc.h
    - Added runtime, stride, pass values as detailed in the assignment
    - Added my own remaining_quanta to track time quanta for RR.
- proc.c
    - Functions to set stride, get runtime.
    - New set runnable function called whenever
      proc->status = RUNNABLE  would've been called.
        - For RR and stride, enqueues process to process queue
    - scheduler_stride and scheduler_rr functions
        - I believe they are identical since they only dequeue and
          the difference in queue behavior only happens with
          enqueueing.
    - Modified alloc proc to set the lowest stride.
    - Modified freeproc to initialize new values
- main.c
    - Calls different stride schedulers based on the scheduler type.
- user.h
    - Added system call declarations.
- usys.pl
    - Added code to generate assembly.
- syscall.h
    - Added constants to identify system call.

=============================================================
Interrepting the tests!
=============================================================

The first test has a condition that checks if the process has
made it a fifth of the way and prints the runtime. That extra
computation means the process takes longer to complete than the CPU
bound process in test 2. Success looks like the two strides reaching
milestones evenly in RR and proportional to their stride in the
stride scheduler.

The second test has one test iterating through a loop (not checking
the progress so it takes many less ticks) and one test iterating
through 12 sleep(1) calls. When the processes finish the runtimes
are printed. The I/O bound process should finish later but with no
ticks.

```
===============================
Using round robin scheduler
===============================
Test 1 (CPU bound):
Stride 4 process: runtime reached 0 ticks.
Stride 12 process: runtime reached 0 ticks.
Stride 4 process: runtime reached 11 ticks.
Stride 12 process: runtime reached 10 ticks.
Stride 12 process: runtime reached 21 ticks.
Stride 4 process: runtime reached 22 ticks.
Stride 4 process: runtime reached 32 ticks.
Stride 12 process: runtime reached 32 ticks.
Stride 4 process: runtime reached 43 ticks.
Stride 12 process: runtime reached 43 ticks.
Stride 4 process: runtime reached 54 ticks.
Stride 12 process: runtime reached 54 ticks.
Test 2 (IO Bound):
Stride 4 process: runtime ended at 12 ticks.
Stride 12 process: runtime ended at 0 ticks.
```

```
===============================
Using stride scheduler
===============================
Test 1 (CPU bound):
Stride 4 process: runtime reached 0 ticks.
Stride 12 process: runtime reached 0 ticks.
Stride 4 process: runtime reached 10 ticks.
Stride 4 process: runtime reached 20 ticks.
Stride 12 process: runtime reached 10 ticks.
Stride 4 process: runtime reached 31 ticks.
Stride 4 process: runtime reached 42 ticks.
Stride 4 process: runtime reached 53 ticks.
Stride 12 process: runtime reached 22 ticks.
Stride 12 process: runtime reached 32 ticks.
Stride 12 process: runtime reached 43 ticks.
Stride 12 process: runtime reached 54 ticks.
Test 2 (IO Bound):
Stride 4 process: runtime ended at 12 ticks.
Stride 12 process: runtime ended at 0 ticks.
```

======================================================================

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
